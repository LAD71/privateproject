1.在合适的目录下创建一个版本库
2.通过git init将这个目录变成Git可以管理的仓库
  git init
  出现：Initialized empty Git repository in G:/Project/GitEntrepot/.git 代表初始化成功
3.创建文件
  1 使用git add命令，告诉Git把文件添加到仓库，即把当前add文件放在暂存区
  eg：git add readme.txt
  2 使用git commit -m "xxx"命令，将文件提交到仓库，即把暂存区文件提交到默认的当前分支master
  eg: git commit -m "wrote a readme file"
  提交成功后，会告诉本次提交几个文件被改动，修改了几个内容
  3 可以多次add ,commit可以一次提交多个文件
  eg: git add file1.txt
      git add file2.txt file3.txt
      git commit -m "add 3 files"

  warning:除了git init可以在仓库目录外执行，其余命令必须都在仓库目录内执行；
          如果再提交的时候报错当前目录下没有文件，则查看目录是否正确
4.版本回退
  1 查看最近提交
    git log
    如果想简略看，可以加参数 --pretty=oneline
  2 回退到上一个版本
    git reset --hard HEAD^
  3 如果后悔回退，只要当前窗口未关闭，使用命令
    git reset --hard xxxx
    xxxx就是某个版本的commit id，一般来说只要前几位就可以
  4 如果已经关掉当前窗口，但是依旧想回到之前的某个版本，可以使用命令
    git reflog
    可以查看到每一次提交的记录，包含有commit id，找到id后在执行步骤3即可回到目标版本
5.查看暂存区状态
  git status
6.管理修改
  如果文件第一次被修改，已经执行过git add，但是并未commit；对文件进行第二次修改，然后commit。
  此时只会将第一次add的文件内容提交，因为第二次的修改并未add到暂存区，而是一直存放在仓库工作区
7.撤销修改
  1 在工作区将文件修改，但并未上传，此时如果想撤销修改，则执行
  git checkout -- filename
  eg:git checkout -- readme.txt
  此时文件就和版本库保持一致

  2 在工作区将文件修改，且已经上传到暂存区，此时如果想撤销修改，依然可执行
  git checkout -- filename
  
  此时文件就和添加到暂存区之前保持一致
8.删除文件
  1 本地目录文件使用rm删除后，版本库内该文件还存在，则需要使用
  git rm filename
  eg:git rm readme.txt
  之后需要再commit一次，保持一致
  2 本地目录误删，但是版本库还有该文件，则可以使用
  git checkout -- filename
  eg:git checkout readme.txt
  原理就是将版本库内的文件替换工作区内的版本文件

  warning：如果从未被添加到版本库，就被删除的文件，是无法恢复的
9.首次push文件到远程仓库
  要关联一个远程库，使用命令
  git remote add origin https://github.com/LAD71/privateproject.git

  关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；

  关联后，使用命令
  git push -u origin master第一次推送master分支的所有内容；
  
  info:如果首次push没反应，如下解决
  	1.电脑搜索-凭据
	2.Windows凭据-普通凭据，如果有关于GitHub的凭据则删除，没有则跳过
	3.在需要push的目录下，按住shift鼠标右击，打开powershell
	4.执行git push -u origin master
	5.弹出认证选项选择第一个web认证
	6.输入正确密码认证通过
	7.git bash打开命令行，再次执行git push -u origin master即可成功推送到远程仓库
10.git分支  以下name都指的是分支名
   查看分支 git branch
   创建分支 git branch name
   切换分支 git checkout name  或者 git switch name
   创建并切换分支 git chenkout -b name  或者  git switch -c name
   合并某分支到当前分支 git merge name
   删除分支 git branch -d name



















